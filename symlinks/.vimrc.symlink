set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'tpope/vim-fugitive' " Use git commands inside of vim
Plugin 'airblade/vim-gitgutter' " Display git status changes in the code
Plugin 'flazz/vim-colorschemes'
Plugin 'christoomey/vim-tmux-navigator' "Use C - H, J, K , L to switch panes
Plugin 'bling/vim-airline' " Add status line at the bottom
Plugin 'kien/ctrlp.vim' " Keymapped to C -t
Plugin 'edkolev/tmuxline.vim' " Add status line to tmux
Plugin 'editorconfig/editorconfig-vim' " Editorconfig for vim
Plugin 'scrooloose/syntastic' " Check syntax
Plugin 'ntpeters/vim-better-whitespace' " Higlight trailing whitespaces
Plugin 'Yggdroot/indentLine'  " Show indentation guides |
Plugin 'skalnik/vim-vroom' " Run Ruby tests C-r c-R, integrates with vimux
Plugin 'benmills/vimux' " Add small tmux window below vim, use Vimux functions to open the window
Plugin 'Valloric/YouCompleteMe' " Tab to auto complete
Plugin 'scrooloose/nerdcommenter' " Comment lines using <leader> cc
Plugin 'justinmk/vim-sneak' " Jump between lines faster. Use s to start search
Plugin 'mileszs/ack.vim' " Search text in files
Plugin 'SirVer/ultisnips' " Allow for snippets
Plugin 'honza/vim-snippets' " Snippets to use with the ultisnipts
Plugin 'tpope/vim-surround' " Surround code with brackets etc. Use s to change surrounding
" Language specific plugins
Plugin 'leshill/vim-json' " JSON highlight
Plugin 'kchmck/vim-coffee-script' " Coffee script higlight
Plugin 'pangloss/vim-javascript' " Javascript highlight
Plugin 'vim-ruby/vim-ruby' " Ruby highlight
Plugin 'slim-template/vim-slim' " Slim Highligh
Plugin 'tpope/vim-haml' " Slim highligh
Plugin 'tpope/vim-rails' " Rails highlight

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required

" Powerline setup (Airline)
let g:airline_powerline_fonts = 1
set laststatus=2
" Powerline setup finish

" We have VCS -- we don't need this stuff."
set nobackup " We have vcs, we don't need backups.
set nowritebackup " We have vcs, we don't need backups.
set noswapfile " They're just annoying. Who likes them?

" don't nag me when hiding buffers
set hidden " allow me to have buffers with unsaved changes.
set autoread " when a file has changed on disk, just load it. Don't ask.

" Show Line numbers
set number
" Make search more sane
set ignorecase " case insensitive search
set smartcase " If there are uppercase letters, become case-sensitive.
set incsearch " live incremental searching
set showmatch " live match highlighting
set hlsearch " highlight matches
set gdefault " use the `g` flag by default.

" So we don't have to press shift when we want to get into command mode.
nnoremap ` :
vnoremap ` :

" So we don't have to reach for escape to leave insert mode.
inoremap jf <esc>

set expandtab " use spaces instead of tabs.
set smarttab " let's tab key insert 'tab stops', and bksp deletes tabs.
set shiftround " tab / shifting moves to closest tabstop.
set autoindent " Match indents on new lines.
set smartindent " Intellegently dedent / indent new lines based on rules.
syntax on

" leader is a key that allows you to have your own "namespace" of keybindings.
let mapleader = ","

" create new vsplit, and switch to it.
noremap <leader>v <C-w>v
" create new horizontal split
noremap <leader>h <C-w>s

" " bindings for easy split nav
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Remap ctrlp to ctrl-t -- map it however you like, or stick with the
let g:ctrlp_map = '<c-t>'

" Let ctrlp have up to 30 results.
let g:ctrlp_max_height = 30
let g:ctrlp_show_hidden = 1

" Colorscheme
colorscheme Tomorrow-Night-Eighties

" Copy into OS clipboard
set clipboard=unnamed

" Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_quiet_messages = { "level": "warnings" }


let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Disable automatic comments
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Highlight current line
":set cursorline

" Vroom configuration.(Run Ruby Tests within vim)
let g:vroom_use_spring = 1
let g:vroom_use_vimux  = 1

" Run last command on vimux
map <Leader>l :VimuxRunLastCommand<CR>

" Vim Sneak configuration
let g:sneak#streak = 1
let g:sneak#s_next = 1

" UltiSnips configuration
let g:UltiSnipsExpandTrigger="<c-q>" " Do not use tab because of YouCompleteMe
let g:UltiSnipsExpandTrigger="<c-c>"
let g:UltiSnipsListSnippets="<c-d>"


