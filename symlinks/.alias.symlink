# vim: filetype=zsh

command_exists () {
      type "$1" &> /dev/null ;
}

alias achef11="ln -sf ~/.chef/knife11.rb ~/.chef/knife.rb"
alias achef12="ln -sf ~/.chef/knife12.rb ~/.chef/knife.rb"
alias dl="cd ~/Downloads"
alias notes="cd ~/Notes/*/notes"
alias dt="cd ~/Desktop"
alias ws="cd ~/Workspace"
alias p6="cd ~/Workspace/parallel6"
alias cr="cd ~/Workspace/parallel6/captivereach"
alias localip="ipconfig getifaddr en0"
alias lror="lsof -wni tcp:3000"

# Devops Alias
alias cdinfra="cd ~/Workspace/parallel6/provenance-infrastructure"
alias cdhelm="cd ~/Workspace/parallel6/provenance-helm-charts"
alias ktx="kubectx"
alias kns="kubens"
alias h="helm"
alias tf="terraform"

if command_exists noti ; then
  alias rdbm="noti spring rake db:migrate"
  alias rdbsl="noti spring rake db:schema:load"
  alias rdbtl="noti spring rake db:test:load"
  alias rdbmr="noti bundle exec rake db:migrate:reset"
  alias dbdc="noti spring rake db:drop db:create"
  alias rinit="noti spring rake db:reset"
  alias seed="noti spring rake db:seed"
else
  alias rdbm="spring rake db:migrate"
  alias rdbsl="spring rake db:schema:load"
  alias rdbtl="spring rake db:test:load"
  alias rdbmr="bundle exec rake db:migrate:reset"
  alias dbdc="spring rake db:drop db:create"
  alias rinit="spring rake db:reset"
  alias seed="spring rake db:seed"
fi

alias st_ror="tmuxinator s RoR"
alias st_cr="tmuxinator s CRoR"
alias st_devops="tmuxinator s devops"
alias st_angular="mux s angular"
alias zshconfig="subl ~/.zshrc"
alias ohmyzsh="subl ~/.oh-my-zsh"
alias kror="tmux kill-session -t RoR"
alias kcr="tmux kill-session -t CRoR"
alias prune_branches="git branch --merged | grep -v "\*" | xargs -n 1 git branch -d"
alias local_gemfile="ln -s ~/.development_gemfile Gemfile.local"


knife_address(){
  local server=$(knife status | grep "$1.*$2")
  echo $server
  local ip=$(echo $server | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
  echo $ip
  echo "ssh jvelasquez@$ip" | pbcopy
}

alias ka="knife_address"

cr_url(){
  local default_environment="production"
  local default_number="01"
  local customer_name=$1
  local environment=${2-$default_environment}
  local server_number=${3-$default_number}
  local server_url="$customer_name-platform-$environment-$server_number.cloud.clinical6.com"
  echo $server_url | pbcopy
  echo $server_url
}
ssh_into_captivereach(){
  if [ -n "$TMUX" ]; then
    ping -c 1 $(cr_url $1 $2 $3)
    if [ $? -eq 0 ]; then
      tmux send-keys "ssh jvelasquez@$(cr_url $1 $2 $3)"  \
        Enter 'PS1="\[\e[38;5;196m\]\H\[\e[0m\] [ \[\e[1;30m\]\d\[\e[0m\] \@ ] \[\e[1;33m\]\w\n\[\e[1;34m\]\u $ \[\033[0m\]"' \
        Enter 'clear' Enter
    fi
  else
    ssh jvelasquez@$(cr_url $1 $2 $3)
  fi
}
run_chef() {
  local url=$(cr_url $1 $2 $3)
  noti ssh jvelasquez@$url sudo chef-client
}

grecent() {
  git reflog -n100 --pretty='%cr|%gs' --grep-reflog='checkout: moving' HEAD | {
    seen=":"
    git_dir="$(git rev-parse --git-dir)"
    while read line; do
      date="${line%%|*}"
      branch="${line##* }"
      if ! [[ $seen == *:"${branch}":* ]]; then
        seen="${seen}${branch}:"
        if [ -f "${git_dir}/refs/heads/${branch}" ]; then
          printf "%s\t%s\n" "$date" "$branch"
        fi
      fi
    done
  }
}

ovpn-start(){
  _ovpn-stop
  openvpn3 session-start --config $1.ovpn
}

_ovpn-stop(){
  sessions=($(openvpn3 sessions-list | grep "Config name:" | sed 's/^.*: //'))
  for session in $sessions
  do
    echo "Stopping connection with: "$session
    openvpn3 session-manage -c $session --disconnect
  done

}

alias scr="ssh_into_captivereach"

# https://unix.stackexchange.com/a/112284
# Reboot directly to Windows
# Inspired by http://askubuntu.com/questions/18170/how-to-reboot-into-windows-from-ubuntu
reboot_to_windows ()
{
    windows_title=$(sudo grep -i windows /boot/grub/grub.cfg | cut -d "'" -f 2)
    sudo grub-reboot "$windows_title" && sudo reboot
}
alias reboot-to-windows='reboot_to_windows'


function clipboard() {
  # Linux version
  # Use this script to pipe in/out of the clipboard
  #
  # Usage: someapp | clipboard     # Pipe someapp's output into clipboard
  #        clipboard | someapp     # Pipe clipboard's content into someapp
  #

  if command -v xclip 1>/dev/null; then
      if [[ -p /dev/stdin ]] ; then
          # stdin is a pipe
          # stdin -> clipboard
          xargs echo -n | xclip -i -selection clipboard
      else
          # stdin is not a pipe
          # clipboard -> stdout
          xargs echo -n | xclip -i -selection clipboard
      fi
  else
      echo "Remember to install xclip"
  fi
}

function randcopy(){
  openssl rand -base64 32 | clipboard
}


# Sample for getting temp session token from AWS STS
#
# aws --profile youriamuser sts get-session-token --duration 3600 \
# --serial-number arn:aws:iam::012345678901:mfa/user --token-code 012345
#

# 1 or 2 args ok
function aws-mfa(){
  if [[ $# -ne 1 && $# -ne 2 ]]; then
    echo "Usage: $0 <MFA_TOKEN_CODE> <AWS_CLI_PROFILE>"
    echo "Where:"
    echo "   <MFA_TOKEN_CODE> = Code from virtual MFA device"
    echo "   <AWS_CLI_PROFILE> = aws-cli profile usually in $HOME/.aws/config"
  else
      AWS_CLI_PROFILE=${2:-default}
      MFA_TOKEN_CODE=$1
      DURATION=129600
      SESSION_FILE="${HOME}/.aws/mfa_session_${AWS_CLI_PROFILE}"

      USER_INFO="$(aws --profile $AWS_CLI_PROFILE iam get-user --output text)"

      if [[ x"$USER_INFO" == "x" ]]; then
        echo "Something went wrong, please check 'aws iam get-user' output"
        exit 1
      else
          USER_ID="$(echo $USER_INFO | awk '{print $NF}')"
          ORG_ID="$(echo $USER_INFO | awk -F: '{print $5}')"
          ARN_OF_MFA="arn:aws:iam::${ORG_ID}:mfa/${USER_ID}"
      fi

      echo "AWS-CLI Profile: $AWS_CLI_PROFILE"
      echo "MFA ARN: $ARN_OF_MFA"
      echo "MFA Token Code: $MFA_TOKEN_CODE"

      aws --profile $AWS_CLI_PROFILE sts get-session-token --duration $DURATION \
        --serial-number $ARN_OF_MFA --token-code $MFA_TOKEN_CODE --output text \
        | awk '{printf("export AWS_ACCESS_KEY_ID=\"%s\"\nexport AWS_SECRET_ACCESS_KEY=\"%s\"\nexport AWS_SESSION_TOKEN=\"%s\"\nexport AWS_SECURITY_TOKEN=\"%s\"\n",$2,$4,$5,$5)}' > $SESSION_FILE
  # Fail if mfa or creds are incorrect
      if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
          echo "ERROR retrieving credentials from AWS"
      else
          echo "Temporary Creds written in $SESSION_FILE"
          source $SESSION_FILE
      fi
  fi
}
